name: Deploy to Production

on:
  push:
    branches: [ main, master ]
  workflow_dispatch: # Permite execução manual

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🚀 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 🔐 Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        
    - name: 🔧 Setup SSH with password
      run: |
        # Instalar sshpass para autenticação por senha
        sudo apt-get update
        sudo apt-get install -y sshpass
        
    - name: 🧹 Clean cache
      run: |
        npm cache clean --force
        rm -rf node_modules package-lock.json
        
    - name: 📦 Install dependencies (Frontend)
      run: |
        npm install --verbose
        npm list --depth=0
        
    - name: 📦 Install dependencies (Backend)
      run: |
        cd backend
        npm install --verbose
        npm list --depth=0
        cd ..
        
    - name: 🔨 Build Frontend
      run: |
        echo "🔨 Iniciando build do frontend..."
        npm run build
        echo "✅ Build do frontend concluído!"
        ls -la dist/
        
    - name: 🔨 Build Backend
      run: |
        echo "🔨 Iniciando build do backend..."
        cd backend
        npm run build
        echo "✅ Build do backend concluído!"
        ls -la dist/
        cd ..
        
    - name: 📤 Deploy to server (Clean Install)
      run: |
        # Criar arquivo de deploy temporário
        cat > deploy-remote.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Iniciando deploy limpo..."
        
        # Navegar para o diretório do projeto
        cd /var/www/sistema_raunaimer
        
        # Parar e remover todas as aplicações PM2
        echo "🛑 Parando todas as aplicações..."
        pm2 stop all 2>/dev/null || true
        pm2 delete all 2>/dev/null || true
        
        # Fazer pull das mudanças
        echo "📥 Fazendo pull das mudanças..."
        git fetch origin main
        git reset --hard origin/main
        
        # Limpar cache e node_modules
        echo "🧹 Limpando cache..."
        rm -rf node_modules package-lock.json
        rm -rf backend/node_modules backend/package-lock.json
        
        # Configurar permissões
        chown -R deploy:deploy /var/www/sistema_raunaimer
        
        # Instalar dependências
        echo "📦 Instalando dependências do frontend..."
        npm install
        
        echo "📦 Instalando dependências do backend..."
        cd backend && npm install && cd ..
        
        # Build das aplicações
        echo "🔨 Build do frontend..."
        npm run build
        
        echo "🔨 Build do backend..."
        cd backend && npm run build && cd ..
        
        # Iniciar com PM2
        echo "🚀 Iniciando aplicações com PM2..."
        pm2 start ecosystem.config.cjs --env production
        
        # Salvar configuração
        pm2 save
        
        # Verificar status
        echo "✅ Deploy limpo concluído com sucesso!"
        pm2 status
        
        # Mostrar logs recentes
        echo "📋 Logs recentes do backend:"
        pm2 logs raunaimer-backend --lines 10 --nostream || true
        
        echo "📋 Logs recentes do frontend:"
        pm2 logs raunaimer-frontend --lines 5 --nostream || true
        
        echo "🌐 URLs das aplicações:"
        echo "Frontend: http://app.raunaimer.adv.br"
        echo "Backend: http://app.raunaimer.adv.br/api"
        EOF
        
        # Copiar arquivo para o servidor usando sshpass
        sshpass -p '${{ secrets.SSH_PASSWORD }}' scp -o StrictHostKeyChecking=no deploy-remote.sh root@${{ secrets.SERVER_HOST }}:/tmp/
        
        # Executar deploy no servidor usando sshpass
        sshpass -p '${{ secrets.SSH_PASSWORD }}' ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} << 'EOF'
        chmod +x /tmp/deploy-remote.sh
        /tmp/deploy-remote.sh
        rm /tmp/deploy-remote.sh
        EOF
        
    - name: ✅ Deploy completed
      run: echo "Deploy limpo concluído com sucesso!" 