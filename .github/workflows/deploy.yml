name: Deploy to Production

on:
  push:
    branches: [ main, master ]
  workflow_dispatch: # Permite execu√ß√£o manual

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: üöÄ Checkout code
      uses: actions/checkout@v4
      
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: üîß Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: üîê Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        
    - name: üì¶ Install dependencies (Frontend)
      run: npm install
      
    - name: üì¶ Install dependencies (Backend)
      run: |
        cd backend
        npm install
        cd ..
        
    - name: üî® Build Frontend
      run: npm run build
      
    - name: üî® Build Backend
      run: |
        cd backend
        npm run build
        cd ..
        
    - name: üì§ Deploy to server
      run: |
        # Criar arquivo de deploy tempor√°rio
        cat > deploy-remote.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "üöÄ Iniciando deploy remoto..."
        
        # Navegar para o diret√≥rio do projeto
        cd /var/www/sistema_raunaimer
        
        # Fazer pull das mudan√ßas
        git pull origin main
        
        # Instalar depend√™ncias
        npm install
        cd backend && npm install && cd ..
        
        # Build das aplica√ß√µes
        npm run build
        cd backend && npm run build && cd ..
        
        # Parar aplica√ß√µes existentes
        pm2 stop all 2>/dev/null || true
        pm2 delete all 2>/dev/null || true
        
        # Iniciar com PM2
        pm2 start ecosystem.config.js --env production
        
        # Salvar configura√ß√£o
        pm2 save
        
        echo "‚úÖ Deploy conclu√≠do com sucesso!"
        pm2 status
        EOF
        
        # Copiar arquivo para o servidor
        scp deploy-remote.sh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
        
        # Executar deploy no servidor
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
        chmod +x /tmp/deploy-remote.sh
        /tmp/deploy-remote.sh
        rm /tmp/deploy-remote.sh
        EOF
        
    - name: ‚úÖ Deploy completed
      run: echo "Deploy conclu√≠do com sucesso!" 