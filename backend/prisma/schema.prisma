generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Condominio {
  id              String      @id @default(uuid())
  nome            String
  cnpj            String      @unique
  cep             String
  logradouro      String
  numero          String
  complemento     String?
  bairro          String
  cidade          String
  estado          String
  administradora  String?
  tipoServico     TipoServico @default(ASSESSORIA_MENSAL)
  sindicoNome     String      @default("Síndico não informado")
  sindicoCpf      String      @default("000.000.000-00")
  sindicoEmail    String      @default("sindico@condominio.com")
  sindicoTelefone String      @default("(00) 00000-0000")
  moradores       Morador[]
  cobrancas       Cobranca[]
  processos       Processo[]   // Relacionamento com processos

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Morador {
  id              String          @id @default(uuid())
  nome            String
  email           String
  emailsAdicionais String?        // Emails adicionais separados por vírgula
  bloco           String
  apartamento     String
  telefone        String?
  condominioId    String
  statusPagamento StatusPagamento @default(PENDENTE)
  valorAluguel    Float?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  cobrancas       Cobranca[]
  condominio      Condominio      @relation(fields: [condominioId], references: [id])
}

model ModeloCarta {
  id        String     @id @default(uuid())
  titulo    String
  conteudo  String
  headerImageUrl String?  // URL da imagem do cabeçalho
  footerImageUrl String?  // URL da imagem do rodapé/assinatura
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cobrancas Cobranca[]
}

model Cobranca {
  id            String         @id @default(uuid())
  valor         Float?
  vencimento    DateTime
  status        StatusCobranca @default(PENDENTE)
  statusEnvio   StatusEnvio    @default(NAO_ENVIADO)
  condominioId  String
  moradorId     String
  modeloCartaId String
  dataEnvio     DateTime       @default(now())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  condominio    Condominio     @relation(fields: [condominioId], references: [id])
  modeloCarta   ModeloCarta    @relation(fields: [modeloCartaId], references: [id])
  morador       Morador        @relation(fields: [moradorId], references: [id])
}

model EmailConfig {
  id        String   @id @default(uuid())
  host      String
  port      Int
  user      String
  pass      String
  from      String
  secure    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Usuario {
  id         String             @id @default(uuid())
  nome       String
  email      String             @unique
  senha      String
  role       String
  foto       String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  permissoes PermissaoUsuario[]
}

model Permissao {
  id       String             @id @default(uuid())
  nome     String             @unique
  usuarios PermissaoUsuario[]
}

model PermissaoUsuario {
  id          String    @id @default(uuid())
  usuarioId   String
  permissaoId String
  permissao   Permissao @relation(fields: [permissaoId], references: [id])
  usuario     Usuario   @relation(fields: [usuarioId], references: [id])
}

model LogAuditoria {
  id        String   @id @default(uuid())
  usuario   String
  acao      String
  ip        String
  createdAt DateTime @default(now())
}

/// Tabela de processos jurídicos cadastrados manualmente
model Processo {
  id             String          @id @default(uuid())
  nome           String
  unidade        String
  bloco          String?         // novo campo: bloco
  parte          TipoParte      @default(AUTOR) // novo campo: tipo de parte
  acaoDe         String
  situacao       SituacaoProcesso @default(CITACAO)
  numeroProcesso String
  valorDivida    Float?          // opcional
  movimentacoes  String?         // texto livre
  condominioId   String?         // opcional
  
  // Relacionamentos
  condominio     Condominio?     @relation(fields: [condominioId], references: [id])

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

enum StatusCobranca {
  PENDENTE
  PAGO
  ATRASADO
}

enum StatusPagamento {
  EM_DIA
  ATRASADO
  PENDENTE
}

enum StatusEnvio {
  ENVIADO
  ERRO
  NAO_ENVIADO
}

enum TipoServico {
  ASSESSORIA_MENSAL
  SOMENTE_COBRANCAS
}

enum SituacaoProcesso {
  CITACAO
  CONTESTACAO
  REPLICA
  SISBAJUD
  PENHORA_DA_UNIDADE
  ACORDO_PROTOCOLADO
  ACORDO_HOMOLOGADO
  ACORDO_QUEBRADO
  QUITACAO_DA_DIVIDA
  EXTINTO
  CUMP_SENTENCA
  GRAU_DE_RECURSO
}

enum TipoParte {
  AUTOR
  REU
  TERCEIRO_INTERESSADO
}
